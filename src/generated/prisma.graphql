# source: http://192.168.99.100:4466
# timestamp: Sat Jun 01 2019 16:25:01 GMT+0300 (GMT+03:00)

type AggregateCategory {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateCommentReplyMessage {
  count: Int!
}

type AggregateDisqus {
  count: Int!
}

type AggregateDisqusComment {
  count: Int!
}

type AggregateDisqusMessageLike {
  count: Int!
}

type AggregateDisqusReplyMessageLike {
  count: Int!
}

type AggregateDReplyComment {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregateLikeMessage {
  count: Int!
}

type AggregateLikeReplyMessage {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateSubCategories {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Category implements Node {
  id: ID!
  url: String!
  title: String!
  description: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  subCategories(where: SubCategoriesWhereInput, orderBy: SubCategoriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubCategories!]
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  url: String!
  title: String!
  description: String!
  posts: PostCreateManyWithoutCategoryInput
  subCategories: SubCategoriesCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutPostsInput {
  create: CategoryCreateWithoutPostsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutSubCategoriesInput {
  create: CategoryCreateWithoutSubCategoriesInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutPostsInput {
  id: ID
  url: String!
  title: String!
  description: String!
  subCategories: SubCategoriesCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutSubCategoriesInput {
  id: ID
  url: String!
  title: String!
  description: String!
  posts: PostCreateManyWithoutCategoryInput
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type CategoryPreviousValues {
  id: ID!
  url: String!
  title: String!
  description: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  url: String
  title: String
  description: String
  posts: PostUpdateManyWithoutCategoryInput
  subCategories: SubCategoriesUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  url: String
  title: String
  description: String
}

input CategoryUpdateOneRequiredWithoutPostsInput {
  create: CategoryCreateWithoutPostsInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutPostsDataInput
  upsert: CategoryUpsertWithoutPostsInput
}

input CategoryUpdateOneRequiredWithoutSubCategoriesInput {
  create: CategoryCreateWithoutSubCategoriesInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutSubCategoriesDataInput
  upsert: CategoryUpsertWithoutSubCategoriesInput
}

input CategoryUpdateWithoutPostsDataInput {
  url: String
  title: String
  description: String
  subCategories: SubCategoriesUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutSubCategoriesDataInput {
  url: String
  title: String
  description: String
  posts: PostUpdateManyWithoutCategoryInput
}

input CategoryUpsertWithoutPostsInput {
  update: CategoryUpdateWithoutPostsDataInput!
  create: CategoryCreateWithoutPostsInput!
}

input CategoryUpsertWithoutSubCategoriesInput {
  update: CategoryUpdateWithoutSubCategoriesDataInput!
  create: CategoryCreateWithoutSubCategoriesInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  subCategories_every: SubCategoriesWhereInput
  subCategories_some: SubCategoriesWhereInput
  subCategories_none: SubCategoriesWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

type Comment implements Node {
  id: ID!
  text: String!
  user: User!
  post: Post!
  status: String!
  likes(where: LikeMessageWhereInput, orderBy: LikeMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikeMessage!]
  replies(where: CommentReplyMessageWhereInput, orderBy: CommentReplyMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentReplyMessage!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  status: String!
  user: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  likes: LikeMessageCreateManyWithoutCommentInput
  replies: CommentReplyMessageCreateManyWithoutCommentInput
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutLikesInput {
  create: CommentCreateWithoutLikesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateOneWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutLikesInput {
  id: ID
  text: String!
  status: String!
  user: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  replies: CommentReplyMessageCreateManyWithoutCommentInput
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  status: String!
  user: UserCreateOneWithoutCommentsInput!
  likes: LikeMessageCreateManyWithoutCommentInput
  replies: CommentReplyMessageCreateManyWithoutCommentInput
}

input CommentCreateWithoutRepliesInput {
  id: ID
  text: String!
  status: String!
  user: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  likes: LikeMessageCreateManyWithoutCommentInput
}

input CommentCreateWithoutUserInput {
  id: ID
  text: String!
  status: String!
  post: PostCreateOneWithoutCommentsInput!
  likes: LikeMessageCreateManyWithoutCommentInput
  replies: CommentReplyMessageCreateManyWithoutCommentInput
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentReplyMessage implements Node {
  id: ID!
  text: String!
  comment: Comment!
  user: User!
  likes(where: LikeReplyMessageWhereInput, orderBy: LikeReplyMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikeReplyMessage!]
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CommentReplyMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentReplyMessageEdge]!
  aggregate: AggregateCommentReplyMessage!
}

input CommentReplyMessageCreateInput {
  id: ID
  text: String!
  status: String!
  comment: CommentCreateOneWithoutRepliesInput!
  user: UserCreateOneInput!
  likes: LikeReplyMessageCreateManyWithoutReplyCommentInput
}

input CommentReplyMessageCreateManyWithoutCommentInput {
  create: [CommentReplyMessageCreateWithoutCommentInput!]
  connect: [CommentReplyMessageWhereUniqueInput!]
}

input CommentReplyMessageCreateOneWithoutLikesInput {
  create: CommentReplyMessageCreateWithoutLikesInput
  connect: CommentReplyMessageWhereUniqueInput
}

input CommentReplyMessageCreateWithoutCommentInput {
  id: ID
  text: String!
  status: String!
  user: UserCreateOneInput!
  likes: LikeReplyMessageCreateManyWithoutReplyCommentInput
}

input CommentReplyMessageCreateWithoutLikesInput {
  id: ID
  text: String!
  status: String!
  comment: CommentCreateOneWithoutRepliesInput!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type CommentReplyMessageEdge {
  """The item at the end of the edge."""
  node: CommentReplyMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentReplyMessageOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentReplyMessagePreviousValues {
  id: ID!
  text: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentReplyMessageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentReplyMessageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentReplyMessageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentReplyMessageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CommentReplyMessageSubscriptionPayload {
  mutation: MutationType!
  node: CommentReplyMessage
  updatedFields: [String!]
  previousValues: CommentReplyMessagePreviousValues
}

input CommentReplyMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentReplyMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentReplyMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentReplyMessageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentReplyMessageWhereInput
}

input CommentReplyMessageUpdateInput {
  text: String
  status: String
  comment: CommentUpdateOneRequiredWithoutRepliesInput
  user: UserUpdateOneRequiredInput
  likes: LikeReplyMessageUpdateManyWithoutReplyCommentInput
}

input CommentReplyMessageUpdateManyDataInput {
  text: String
  status: String
}

input CommentReplyMessageUpdateManyMutationInput {
  text: String
  status: String
}

input CommentReplyMessageUpdateManyWithoutCommentInput {
  create: [CommentReplyMessageCreateWithoutCommentInput!]
  connect: [CommentReplyMessageWhereUniqueInput!]
  set: [CommentReplyMessageWhereUniqueInput!]
  disconnect: [CommentReplyMessageWhereUniqueInput!]
  delete: [CommentReplyMessageWhereUniqueInput!]
  update: [CommentReplyMessageUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [CommentReplyMessageUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentReplyMessageScalarWhereInput!]
  upsert: [CommentReplyMessageUpsertWithWhereUniqueWithoutCommentInput!]
}

input CommentReplyMessageUpdateManyWithWhereNestedInput {
  where: CommentReplyMessageScalarWhereInput!
  data: CommentReplyMessageUpdateManyDataInput!
}

input CommentReplyMessageUpdateOneRequiredWithoutLikesInput {
  create: CommentReplyMessageCreateWithoutLikesInput
  connect: CommentReplyMessageWhereUniqueInput
  update: CommentReplyMessageUpdateWithoutLikesDataInput
  upsert: CommentReplyMessageUpsertWithoutLikesInput
}

input CommentReplyMessageUpdateWithoutCommentDataInput {
  text: String
  status: String
  user: UserUpdateOneRequiredInput
  likes: LikeReplyMessageUpdateManyWithoutReplyCommentInput
}

input CommentReplyMessageUpdateWithoutLikesDataInput {
  text: String
  status: String
  comment: CommentUpdateOneRequiredWithoutRepliesInput
  user: UserUpdateOneRequiredInput
}

input CommentReplyMessageUpdateWithWhereUniqueWithoutCommentInput {
  where: CommentReplyMessageWhereUniqueInput!
  data: CommentReplyMessageUpdateWithoutCommentDataInput!
}

input CommentReplyMessageUpsertWithoutLikesInput {
  update: CommentReplyMessageUpdateWithoutLikesDataInput!
  create: CommentReplyMessageCreateWithoutLikesInput!
}

input CommentReplyMessageUpsertWithWhereUniqueWithoutCommentInput {
  where: CommentReplyMessageWhereUniqueInput!
  update: CommentReplyMessageUpdateWithoutCommentDataInput!
  create: CommentReplyMessageCreateWithoutCommentInput!
}

input CommentReplyMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentReplyMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentReplyMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentReplyMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  comment: CommentWhereInput
  user: UserWhereInput
  likes_every: LikeReplyMessageWhereInput
  likes_some: LikeReplyMessageWhereInput
  likes_none: LikeReplyMessageWhereInput
}

input CommentReplyMessageWhereUniqueInput {
  id: ID
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  text: String
  status: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  likes: LikeMessageUpdateManyWithoutCommentInput
  replies: CommentReplyMessageUpdateManyWithoutCommentInput
}

input CommentUpdateManyDataInput {
  text: String
  status: String
}

input CommentUpdateManyMutationInput {
  text: String
  status: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneRequiredWithoutLikesInput {
  create: CommentCreateWithoutLikesInput
  connect: CommentWhereUniqueInput
  update: CommentUpdateWithoutLikesDataInput
  upsert: CommentUpsertWithoutLikesInput
}

input CommentUpdateOneRequiredWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput
  connect: CommentWhereUniqueInput
  update: CommentUpdateWithoutRepliesDataInput
  upsert: CommentUpsertWithoutRepliesInput
}

input CommentUpdateWithoutLikesDataInput {
  text: String
  status: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  replies: CommentReplyMessageUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  status: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  likes: LikeMessageUpdateManyWithoutCommentInput
  replies: CommentReplyMessageUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutRepliesDataInput {
  text: String
  status: String
  user: UserUpdateOneRequiredWithoutCommentsInput
  post: PostUpdateOneRequiredWithoutCommentsInput
  likes: LikeMessageUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutUserDataInput {
  text: String
  status: String
  post: PostUpdateOneRequiredWithoutCommentsInput
  likes: LikeMessageUpdateManyWithoutCommentInput
  replies: CommentReplyMessageUpdateManyWithoutCommentInput
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithoutLikesInput {
  update: CommentUpdateWithoutLikesDataInput!
  create: CommentCreateWithoutLikesInput!
}

input CommentUpsertWithoutRepliesInput {
  update: CommentUpdateWithoutRepliesDataInput!
  create: CommentCreateWithoutRepliesInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  post: PostWhereInput
  likes_every: LikeMessageWhereInput
  likes_some: LikeMessageWhereInput
  likes_none: LikeMessageWhereInput
  replies_every: CommentReplyMessageWhereInput
  replies_some: CommentReplyMessageWhereInput
  replies_none: CommentReplyMessageWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Disqus implements Node {
  id: ID!
  url: String!
  title: String!
  description: String!
  creator: User!
  comments(where: DisqusCommentWhereInput, orderBy: DisqusCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DisqusComment!]
  isActive: Boolean!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

type DisqusComment implements Node {
  id: ID!
  text: String!
  disqus: Disqus!
  likes(where: DisqusMessageLikeWhereInput, orderBy: DisqusMessageLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DisqusMessageLike!]
  user: User!
  replies(where: DReplyCommentWhereInput, orderBy: DReplyCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DReplyComment!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DisqusCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DisqusCommentEdge]!
  aggregate: AggregateDisqusComment!
}

input DisqusCommentCreateInput {
  id: ID
  text: String!
  disqus: DisqusCreateOneWithoutCommentsInput!
  likes: DisqusMessageLikeCreateManyWithoutDiscusInput
  user: UserCreateOneWithoutDiscusCommentsInput!
  replies: DReplyCommentCreateManyWithoutCommentInput
}

input DisqusCommentCreateManyWithoutDisqusInput {
  create: [DisqusCommentCreateWithoutDisqusInput!]
  connect: [DisqusCommentWhereUniqueInput!]
}

input DisqusCommentCreateManyWithoutUserInput {
  create: [DisqusCommentCreateWithoutUserInput!]
  connect: [DisqusCommentWhereUniqueInput!]
}

input DisqusCommentCreateOneWithoutLikesInput {
  create: DisqusCommentCreateWithoutLikesInput
  connect: DisqusCommentWhereUniqueInput
}

input DisqusCommentCreateOneWithoutRepliesInput {
  create: DisqusCommentCreateWithoutRepliesInput
  connect: DisqusCommentWhereUniqueInput
}

input DisqusCommentCreateWithoutDisqusInput {
  id: ID
  text: String!
  likes: DisqusMessageLikeCreateManyWithoutDiscusInput
  user: UserCreateOneWithoutDiscusCommentsInput!
  replies: DReplyCommentCreateManyWithoutCommentInput
}

input DisqusCommentCreateWithoutLikesInput {
  id: ID
  text: String!
  disqus: DisqusCreateOneWithoutCommentsInput!
  user: UserCreateOneWithoutDiscusCommentsInput!
  replies: DReplyCommentCreateManyWithoutCommentInput
}

input DisqusCommentCreateWithoutRepliesInput {
  id: ID
  text: String!
  disqus: DisqusCreateOneWithoutCommentsInput!
  likes: DisqusMessageLikeCreateManyWithoutDiscusInput
  user: UserCreateOneWithoutDiscusCommentsInput!
}

input DisqusCommentCreateWithoutUserInput {
  id: ID
  text: String!
  disqus: DisqusCreateOneWithoutCommentsInput!
  likes: DisqusMessageLikeCreateManyWithoutDiscusInput
  replies: DReplyCommentCreateManyWithoutCommentInput
}

"""An edge in a connection."""
type DisqusCommentEdge {
  """The item at the end of the edge."""
  node: DisqusComment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DisqusCommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DisqusCommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DisqusCommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusCommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusCommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusCommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DisqusCommentSubscriptionPayload {
  mutation: MutationType!
  node: DisqusComment
  updatedFields: [String!]
  previousValues: DisqusCommentPreviousValues
}

input DisqusCommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusCommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusCommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusCommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DisqusCommentWhereInput
}

input DisqusCommentUpdateInput {
  text: String
  disqus: DisqusUpdateOneRequiredWithoutCommentsInput
  likes: DisqusMessageLikeUpdateManyWithoutDiscusInput
  user: UserUpdateOneRequiredWithoutDiscusCommentsInput
  replies: DReplyCommentUpdateManyWithoutCommentInput
}

input DisqusCommentUpdateManyDataInput {
  text: String
}

input DisqusCommentUpdateManyMutationInput {
  text: String
}

input DisqusCommentUpdateManyWithoutDisqusInput {
  create: [DisqusCommentCreateWithoutDisqusInput!]
  connect: [DisqusCommentWhereUniqueInput!]
  set: [DisqusCommentWhereUniqueInput!]
  disconnect: [DisqusCommentWhereUniqueInput!]
  delete: [DisqusCommentWhereUniqueInput!]
  update: [DisqusCommentUpdateWithWhereUniqueWithoutDisqusInput!]
  updateMany: [DisqusCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [DisqusCommentScalarWhereInput!]
  upsert: [DisqusCommentUpsertWithWhereUniqueWithoutDisqusInput!]
}

input DisqusCommentUpdateManyWithoutUserInput {
  create: [DisqusCommentCreateWithoutUserInput!]
  connect: [DisqusCommentWhereUniqueInput!]
  set: [DisqusCommentWhereUniqueInput!]
  disconnect: [DisqusCommentWhereUniqueInput!]
  delete: [DisqusCommentWhereUniqueInput!]
  update: [DisqusCommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [DisqusCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [DisqusCommentScalarWhereInput!]
  upsert: [DisqusCommentUpsertWithWhereUniqueWithoutUserInput!]
}

input DisqusCommentUpdateManyWithWhereNestedInput {
  where: DisqusCommentScalarWhereInput!
  data: DisqusCommentUpdateManyDataInput!
}

input DisqusCommentUpdateOneRequiredWithoutLikesInput {
  create: DisqusCommentCreateWithoutLikesInput
  connect: DisqusCommentWhereUniqueInput
  update: DisqusCommentUpdateWithoutLikesDataInput
  upsert: DisqusCommentUpsertWithoutLikesInput
}

input DisqusCommentUpdateOneRequiredWithoutRepliesInput {
  create: DisqusCommentCreateWithoutRepliesInput
  connect: DisqusCommentWhereUniqueInput
  update: DisqusCommentUpdateWithoutRepliesDataInput
  upsert: DisqusCommentUpsertWithoutRepliesInput
}

input DisqusCommentUpdateWithoutDisqusDataInput {
  text: String
  likes: DisqusMessageLikeUpdateManyWithoutDiscusInput
  user: UserUpdateOneRequiredWithoutDiscusCommentsInput
  replies: DReplyCommentUpdateManyWithoutCommentInput
}

input DisqusCommentUpdateWithoutLikesDataInput {
  text: String
  disqus: DisqusUpdateOneRequiredWithoutCommentsInput
  user: UserUpdateOneRequiredWithoutDiscusCommentsInput
  replies: DReplyCommentUpdateManyWithoutCommentInput
}

input DisqusCommentUpdateWithoutRepliesDataInput {
  text: String
  disqus: DisqusUpdateOneRequiredWithoutCommentsInput
  likes: DisqusMessageLikeUpdateManyWithoutDiscusInput
  user: UserUpdateOneRequiredWithoutDiscusCommentsInput
}

input DisqusCommentUpdateWithoutUserDataInput {
  text: String
  disqus: DisqusUpdateOneRequiredWithoutCommentsInput
  likes: DisqusMessageLikeUpdateManyWithoutDiscusInput
  replies: DReplyCommentUpdateManyWithoutCommentInput
}

input DisqusCommentUpdateWithWhereUniqueWithoutDisqusInput {
  where: DisqusCommentWhereUniqueInput!
  data: DisqusCommentUpdateWithoutDisqusDataInput!
}

input DisqusCommentUpdateWithWhereUniqueWithoutUserInput {
  where: DisqusCommentWhereUniqueInput!
  data: DisqusCommentUpdateWithoutUserDataInput!
}

input DisqusCommentUpsertWithoutLikesInput {
  update: DisqusCommentUpdateWithoutLikesDataInput!
  create: DisqusCommentCreateWithoutLikesInput!
}

input DisqusCommentUpsertWithoutRepliesInput {
  update: DisqusCommentUpdateWithoutRepliesDataInput!
  create: DisqusCommentCreateWithoutRepliesInput!
}

input DisqusCommentUpsertWithWhereUniqueWithoutDisqusInput {
  where: DisqusCommentWhereUniqueInput!
  update: DisqusCommentUpdateWithoutDisqusDataInput!
  create: DisqusCommentCreateWithoutDisqusInput!
}

input DisqusCommentUpsertWithWhereUniqueWithoutUserInput {
  where: DisqusCommentWhereUniqueInput!
  update: DisqusCommentUpdateWithoutUserDataInput!
  create: DisqusCommentCreateWithoutUserInput!
}

input DisqusCommentWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusCommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusCommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusCommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  disqus: DisqusWhereInput
  likes_every: DisqusMessageLikeWhereInput
  likes_some: DisqusMessageLikeWhereInput
  likes_none: DisqusMessageLikeWhereInput
  user: UserWhereInput
  replies_every: DReplyCommentWhereInput
  replies_some: DReplyCommentWhereInput
  replies_none: DReplyCommentWhereInput
}

input DisqusCommentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type DisqusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DisqusEdge]!
  aggregate: AggregateDisqus!
}

input DisqusCreateInput {
  id: ID
  url: String!
  title: String!
  description: String!
  isActive: Boolean!
  status: String!
  creator: UserCreateOneWithoutDiscussionsInput!
  comments: DisqusCommentCreateManyWithoutDisqusInput
}

input DisqusCreateManyWithoutCreatorInput {
  create: [DisqusCreateWithoutCreatorInput!]
  connect: [DisqusWhereUniqueInput!]
}

input DisqusCreateOneWithoutCommentsInput {
  create: DisqusCreateWithoutCommentsInput
  connect: DisqusWhereUniqueInput
}

input DisqusCreateWithoutCommentsInput {
  id: ID
  url: String!
  title: String!
  description: String!
  isActive: Boolean!
  status: String!
  creator: UserCreateOneWithoutDiscussionsInput!
}

input DisqusCreateWithoutCreatorInput {
  id: ID
  url: String!
  title: String!
  description: String!
  isActive: Boolean!
  status: String!
  comments: DisqusCommentCreateManyWithoutDisqusInput
}

"""An edge in a connection."""
type DisqusEdge {
  """The item at the end of the edge."""
  node: Disqus!

  """A cursor for use in pagination."""
  cursor: String!
}

type DisqusMessageLike implements Node {
  id: ID!
  discus: DisqusComment!
  user: User!
}

"""A connection to a list of items."""
type DisqusMessageLikeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DisqusMessageLikeEdge]!
  aggregate: AggregateDisqusMessageLike!
}

input DisqusMessageLikeCreateInput {
  id: ID
  discus: DisqusCommentCreateOneWithoutLikesInput!
  user: UserCreateOneInput!
}

input DisqusMessageLikeCreateManyWithoutDiscusInput {
  create: [DisqusMessageLikeCreateWithoutDiscusInput!]
  connect: [DisqusMessageLikeWhereUniqueInput!]
}

input DisqusMessageLikeCreateWithoutDiscusInput {
  id: ID
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type DisqusMessageLikeEdge {
  """The item at the end of the edge."""
  node: DisqusMessageLike!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DisqusMessageLikeOrderByInput {
  id_ASC
  id_DESC
}

type DisqusMessageLikePreviousValues {
  id: ID!
}

input DisqusMessageLikeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusMessageLikeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusMessageLikeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusMessageLikeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type DisqusMessageLikeSubscriptionPayload {
  mutation: MutationType!
  node: DisqusMessageLike
  updatedFields: [String!]
  previousValues: DisqusMessageLikePreviousValues
}

input DisqusMessageLikeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusMessageLikeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusMessageLikeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusMessageLikeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DisqusMessageLikeWhereInput
}

input DisqusMessageLikeUpdateInput {
  discus: DisqusCommentUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredInput
}

input DisqusMessageLikeUpdateManyWithoutDiscusInput {
  create: [DisqusMessageLikeCreateWithoutDiscusInput!]
  connect: [DisqusMessageLikeWhereUniqueInput!]
  set: [DisqusMessageLikeWhereUniqueInput!]
  disconnect: [DisqusMessageLikeWhereUniqueInput!]
  delete: [DisqusMessageLikeWhereUniqueInput!]
  update: [DisqusMessageLikeUpdateWithWhereUniqueWithoutDiscusInput!]
  deleteMany: [DisqusMessageLikeScalarWhereInput!]
  upsert: [DisqusMessageLikeUpsertWithWhereUniqueWithoutDiscusInput!]
}

input DisqusMessageLikeUpdateWithoutDiscusDataInput {
  user: UserUpdateOneRequiredInput
}

input DisqusMessageLikeUpdateWithWhereUniqueWithoutDiscusInput {
  where: DisqusMessageLikeWhereUniqueInput!
  data: DisqusMessageLikeUpdateWithoutDiscusDataInput!
}

input DisqusMessageLikeUpsertWithWhereUniqueWithoutDiscusInput {
  where: DisqusMessageLikeWhereUniqueInput!
  update: DisqusMessageLikeUpdateWithoutDiscusDataInput!
  create: DisqusMessageLikeCreateWithoutDiscusInput!
}

input DisqusMessageLikeWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusMessageLikeWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusMessageLikeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusMessageLikeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  discus: DisqusCommentWhereInput
  user: UserWhereInput
}

input DisqusMessageLikeWhereUniqueInput {
  id: ID
}

enum DisqusOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DisqusPreviousValues {
  id: ID!
  url: String!
  title: String!
  description: String!
  isActive: Boolean!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

type DisqusReplyMessageLike implements Node {
  id: ID!
  discusReply: DReplyComment!
  user: User!
}

"""A connection to a list of items."""
type DisqusReplyMessageLikeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DisqusReplyMessageLikeEdge]!
  aggregate: AggregateDisqusReplyMessageLike!
}

input DisqusReplyMessageLikeCreateInput {
  id: ID
  discusReply: DReplyCommentCreateOneWithoutLikesInput!
  user: UserCreateOneInput!
}

input DisqusReplyMessageLikeCreateManyWithoutDiscusReplyInput {
  create: [DisqusReplyMessageLikeCreateWithoutDiscusReplyInput!]
  connect: [DisqusReplyMessageLikeWhereUniqueInput!]
}

input DisqusReplyMessageLikeCreateWithoutDiscusReplyInput {
  id: ID
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type DisqusReplyMessageLikeEdge {
  """The item at the end of the edge."""
  node: DisqusReplyMessageLike!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DisqusReplyMessageLikeOrderByInput {
  id_ASC
  id_DESC
}

type DisqusReplyMessageLikePreviousValues {
  id: ID!
}

input DisqusReplyMessageLikeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusReplyMessageLikeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusReplyMessageLikeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusReplyMessageLikeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type DisqusReplyMessageLikeSubscriptionPayload {
  mutation: MutationType!
  node: DisqusReplyMessageLike
  updatedFields: [String!]
  previousValues: DisqusReplyMessageLikePreviousValues
}

input DisqusReplyMessageLikeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusReplyMessageLikeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusReplyMessageLikeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusReplyMessageLikeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DisqusReplyMessageLikeWhereInput
}

input DisqusReplyMessageLikeUpdateInput {
  discusReply: DReplyCommentUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredInput
}

input DisqusReplyMessageLikeUpdateManyWithoutDiscusReplyInput {
  create: [DisqusReplyMessageLikeCreateWithoutDiscusReplyInput!]
  connect: [DisqusReplyMessageLikeWhereUniqueInput!]
  set: [DisqusReplyMessageLikeWhereUniqueInput!]
  disconnect: [DisqusReplyMessageLikeWhereUniqueInput!]
  delete: [DisqusReplyMessageLikeWhereUniqueInput!]
  update: [DisqusReplyMessageLikeUpdateWithWhereUniqueWithoutDiscusReplyInput!]
  deleteMany: [DisqusReplyMessageLikeScalarWhereInput!]
  upsert: [DisqusReplyMessageLikeUpsertWithWhereUniqueWithoutDiscusReplyInput!]
}

input DisqusReplyMessageLikeUpdateWithoutDiscusReplyDataInput {
  user: UserUpdateOneRequiredInput
}

input DisqusReplyMessageLikeUpdateWithWhereUniqueWithoutDiscusReplyInput {
  where: DisqusReplyMessageLikeWhereUniqueInput!
  data: DisqusReplyMessageLikeUpdateWithoutDiscusReplyDataInput!
}

input DisqusReplyMessageLikeUpsertWithWhereUniqueWithoutDiscusReplyInput {
  where: DisqusReplyMessageLikeWhereUniqueInput!
  update: DisqusReplyMessageLikeUpdateWithoutDiscusReplyDataInput!
  create: DisqusReplyMessageLikeCreateWithoutDiscusReplyInput!
}

input DisqusReplyMessageLikeWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusReplyMessageLikeWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusReplyMessageLikeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusReplyMessageLikeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  discusReply: DReplyCommentWhereInput
  user: UserWhereInput
}

input DisqusReplyMessageLikeWhereUniqueInput {
  id: ID
}

input DisqusScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DisqusSubscriptionPayload {
  mutation: MutationType!
  node: Disqus
  updatedFields: [String!]
  previousValues: DisqusPreviousValues
}

input DisqusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DisqusWhereInput
}

input DisqusUpdateInput {
  url: String
  title: String
  description: String
  isActive: Boolean
  status: String
  creator: UserUpdateOneRequiredWithoutDiscussionsInput
  comments: DisqusCommentUpdateManyWithoutDisqusInput
}

input DisqusUpdateManyDataInput {
  url: String
  title: String
  description: String
  isActive: Boolean
  status: String
}

input DisqusUpdateManyMutationInput {
  url: String
  title: String
  description: String
  isActive: Boolean
  status: String
}

input DisqusUpdateManyWithoutCreatorInput {
  create: [DisqusCreateWithoutCreatorInput!]
  connect: [DisqusWhereUniqueInput!]
  set: [DisqusWhereUniqueInput!]
  disconnect: [DisqusWhereUniqueInput!]
  delete: [DisqusWhereUniqueInput!]
  update: [DisqusUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [DisqusUpdateManyWithWhereNestedInput!]
  deleteMany: [DisqusScalarWhereInput!]
  upsert: [DisqusUpsertWithWhereUniqueWithoutCreatorInput!]
}

input DisqusUpdateManyWithWhereNestedInput {
  where: DisqusScalarWhereInput!
  data: DisqusUpdateManyDataInput!
}

input DisqusUpdateOneRequiredWithoutCommentsInput {
  create: DisqusCreateWithoutCommentsInput
  connect: DisqusWhereUniqueInput
  update: DisqusUpdateWithoutCommentsDataInput
  upsert: DisqusUpsertWithoutCommentsInput
}

input DisqusUpdateWithoutCommentsDataInput {
  url: String
  title: String
  description: String
  isActive: Boolean
  status: String
  creator: UserUpdateOneRequiredWithoutDiscussionsInput
}

input DisqusUpdateWithoutCreatorDataInput {
  url: String
  title: String
  description: String
  isActive: Boolean
  status: String
  comments: DisqusCommentUpdateManyWithoutDisqusInput
}

input DisqusUpdateWithWhereUniqueWithoutCreatorInput {
  where: DisqusWhereUniqueInput!
  data: DisqusUpdateWithoutCreatorDataInput!
}

input DisqusUpsertWithoutCommentsInput {
  update: DisqusUpdateWithoutCommentsDataInput!
  create: DisqusCreateWithoutCommentsInput!
}

input DisqusUpsertWithWhereUniqueWithoutCreatorInput {
  where: DisqusWhereUniqueInput!
  update: DisqusUpdateWithoutCreatorDataInput!
  create: DisqusCreateWithoutCreatorInput!
}

input DisqusWhereInput {
  """Logical AND on all given filters."""
  AND: [DisqusWhereInput!]

  """Logical OR on all given filters."""
  OR: [DisqusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DisqusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  creator: UserWhereInput
  comments_every: DisqusCommentWhereInput
  comments_some: DisqusCommentWhereInput
  comments_none: DisqusCommentWhereInput
}

input DisqusWhereUniqueInput {
  id: ID
}

type DReplyComment implements Node {
  id: ID!
  text: String!
  comment: DisqusComment!
  likes(where: DisqusReplyMessageLikeWhereInput, orderBy: DisqusReplyMessageLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DisqusReplyMessageLike!]
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DReplyCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DReplyCommentEdge]!
  aggregate: AggregateDReplyComment!
}

input DReplyCommentCreateInput {
  id: ID
  text: String!
  comment: DisqusCommentCreateOneWithoutRepliesInput!
  likes: DisqusReplyMessageLikeCreateManyWithoutDiscusReplyInput
  user: UserCreateOneInput!
}

input DReplyCommentCreateManyWithoutCommentInput {
  create: [DReplyCommentCreateWithoutCommentInput!]
  connect: [DReplyCommentWhereUniqueInput!]
}

input DReplyCommentCreateOneWithoutLikesInput {
  create: DReplyCommentCreateWithoutLikesInput
  connect: DReplyCommentWhereUniqueInput
}

input DReplyCommentCreateWithoutCommentInput {
  id: ID
  text: String!
  likes: DisqusReplyMessageLikeCreateManyWithoutDiscusReplyInput
  user: UserCreateOneInput!
}

input DReplyCommentCreateWithoutLikesInput {
  id: ID
  text: String!
  comment: DisqusCommentCreateOneWithoutRepliesInput!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type DReplyCommentEdge {
  """The item at the end of the edge."""
  node: DReplyComment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DReplyCommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DReplyCommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DReplyCommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DReplyCommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DReplyCommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DReplyCommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DReplyCommentSubscriptionPayload {
  mutation: MutationType!
  node: DReplyComment
  updatedFields: [String!]
  previousValues: DReplyCommentPreviousValues
}

input DReplyCommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DReplyCommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DReplyCommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DReplyCommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DReplyCommentWhereInput
}

input DReplyCommentUpdateInput {
  text: String
  comment: DisqusCommentUpdateOneRequiredWithoutRepliesInput
  likes: DisqusReplyMessageLikeUpdateManyWithoutDiscusReplyInput
  user: UserUpdateOneRequiredInput
}

input DReplyCommentUpdateManyDataInput {
  text: String
}

input DReplyCommentUpdateManyMutationInput {
  text: String
}

input DReplyCommentUpdateManyWithoutCommentInput {
  create: [DReplyCommentCreateWithoutCommentInput!]
  connect: [DReplyCommentWhereUniqueInput!]
  set: [DReplyCommentWhereUniqueInput!]
  disconnect: [DReplyCommentWhereUniqueInput!]
  delete: [DReplyCommentWhereUniqueInput!]
  update: [DReplyCommentUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [DReplyCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [DReplyCommentScalarWhereInput!]
  upsert: [DReplyCommentUpsertWithWhereUniqueWithoutCommentInput!]
}

input DReplyCommentUpdateManyWithWhereNestedInput {
  where: DReplyCommentScalarWhereInput!
  data: DReplyCommentUpdateManyDataInput!
}

input DReplyCommentUpdateOneRequiredWithoutLikesInput {
  create: DReplyCommentCreateWithoutLikesInput
  connect: DReplyCommentWhereUniqueInput
  update: DReplyCommentUpdateWithoutLikesDataInput
  upsert: DReplyCommentUpsertWithoutLikesInput
}

input DReplyCommentUpdateWithoutCommentDataInput {
  text: String
  likes: DisqusReplyMessageLikeUpdateManyWithoutDiscusReplyInput
  user: UserUpdateOneRequiredInput
}

input DReplyCommentUpdateWithoutLikesDataInput {
  text: String
  comment: DisqusCommentUpdateOneRequiredWithoutRepliesInput
  user: UserUpdateOneRequiredInput
}

input DReplyCommentUpdateWithWhereUniqueWithoutCommentInput {
  where: DReplyCommentWhereUniqueInput!
  data: DReplyCommentUpdateWithoutCommentDataInput!
}

input DReplyCommentUpsertWithoutLikesInput {
  update: DReplyCommentUpdateWithoutLikesDataInput!
  create: DReplyCommentCreateWithoutLikesInput!
}

input DReplyCommentUpsertWithWhereUniqueWithoutCommentInput {
  where: DReplyCommentWhereUniqueInput!
  update: DReplyCommentUpdateWithoutCommentDataInput!
  create: DReplyCommentCreateWithoutCommentInput!
}

input DReplyCommentWhereInput {
  """Logical AND on all given filters."""
  AND: [DReplyCommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [DReplyCommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DReplyCommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  comment: DisqusCommentWhereInput
  likes_every: DisqusReplyMessageLikeWhereInput
  likes_some: DisqusReplyMessageLikeWhereInput
  likes_none: DisqusReplyMessageLikeWhereInput
  user: UserWhereInput
}

input DReplyCommentWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type Like implements Node {
  id: ID!
  post: Post!
  user: User!
}

"""A connection to a list of items."""
type LikeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID
  post: PostCreateOneWithoutLikesInput!
  user: UserCreateOneInput!
}

input LikeCreateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutPostInput {
  id: ID
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type LikeEdge {
  """The item at the end of the edge."""
  node: Like!

  """A cursor for use in pagination."""
  cursor: String!
}

type LikeMessage implements Node {
  id: ID!
  comment: Comment!
  user: User!
}

"""A connection to a list of items."""
type LikeMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikeMessageEdge]!
  aggregate: AggregateLikeMessage!
}

input LikeMessageCreateInput {
  id: ID
  comment: CommentCreateOneWithoutLikesInput!
  user: UserCreateOneInput!
}

input LikeMessageCreateManyWithoutCommentInput {
  create: [LikeMessageCreateWithoutCommentInput!]
  connect: [LikeMessageWhereUniqueInput!]
}

input LikeMessageCreateWithoutCommentInput {
  id: ID
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type LikeMessageEdge {
  """The item at the end of the edge."""
  node: LikeMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikeMessageOrderByInput {
  id_ASC
  id_DESC
}

type LikeMessagePreviousValues {
  id: ID!
}

input LikeMessageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LikeMessageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikeMessageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikeMessageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type LikeMessageSubscriptionPayload {
  mutation: MutationType!
  node: LikeMessage
  updatedFields: [String!]
  previousValues: LikeMessagePreviousValues
}

input LikeMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikeMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikeMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikeMessageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikeMessageWhereInput
}

input LikeMessageUpdateInput {
  comment: CommentUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredInput
}

input LikeMessageUpdateManyWithoutCommentInput {
  create: [LikeMessageCreateWithoutCommentInput!]
  connect: [LikeMessageWhereUniqueInput!]
  set: [LikeMessageWhereUniqueInput!]
  disconnect: [LikeMessageWhereUniqueInput!]
  delete: [LikeMessageWhereUniqueInput!]
  update: [LikeMessageUpdateWithWhereUniqueWithoutCommentInput!]
  deleteMany: [LikeMessageScalarWhereInput!]
  upsert: [LikeMessageUpsertWithWhereUniqueWithoutCommentInput!]
}

input LikeMessageUpdateWithoutCommentDataInput {
  user: UserUpdateOneRequiredInput
}

input LikeMessageUpdateWithWhereUniqueWithoutCommentInput {
  where: LikeMessageWhereUniqueInput!
  data: LikeMessageUpdateWithoutCommentDataInput!
}

input LikeMessageUpsertWithWhereUniqueWithoutCommentInput {
  where: LikeMessageWhereUniqueInput!
  update: LikeMessageUpdateWithoutCommentDataInput!
  create: LikeMessageCreateWithoutCommentInput!
}

input LikeMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [LikeMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikeMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikeMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  comment: CommentWhereInput
  user: UserWhereInput
}

input LikeMessageWhereUniqueInput {
  id: ID
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
}

type LikePreviousValues {
  id: ID!
}

type LikeReplyMessage implements Node {
  id: ID!
  replyComment: CommentReplyMessage!
  user: User!
}

"""A connection to a list of items."""
type LikeReplyMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikeReplyMessageEdge]!
  aggregate: AggregateLikeReplyMessage!
}

input LikeReplyMessageCreateInput {
  id: ID
  replyComment: CommentReplyMessageCreateOneWithoutLikesInput!
  user: UserCreateOneInput!
}

input LikeReplyMessageCreateManyWithoutReplyCommentInput {
  create: [LikeReplyMessageCreateWithoutReplyCommentInput!]
  connect: [LikeReplyMessageWhereUniqueInput!]
}

input LikeReplyMessageCreateWithoutReplyCommentInput {
  id: ID
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type LikeReplyMessageEdge {
  """The item at the end of the edge."""
  node: LikeReplyMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikeReplyMessageOrderByInput {
  id_ASC
  id_DESC
}

type LikeReplyMessagePreviousValues {
  id: ID!
}

input LikeReplyMessageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LikeReplyMessageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikeReplyMessageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikeReplyMessageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type LikeReplyMessageSubscriptionPayload {
  mutation: MutationType!
  node: LikeReplyMessage
  updatedFields: [String!]
  previousValues: LikeReplyMessagePreviousValues
}

input LikeReplyMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikeReplyMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikeReplyMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikeReplyMessageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikeReplyMessageWhereInput
}

input LikeReplyMessageUpdateInput {
  replyComment: CommentReplyMessageUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredInput
}

input LikeReplyMessageUpdateManyWithoutReplyCommentInput {
  create: [LikeReplyMessageCreateWithoutReplyCommentInput!]
  connect: [LikeReplyMessageWhereUniqueInput!]
  set: [LikeReplyMessageWhereUniqueInput!]
  disconnect: [LikeReplyMessageWhereUniqueInput!]
  delete: [LikeReplyMessageWhereUniqueInput!]
  update: [LikeReplyMessageUpdateWithWhereUniqueWithoutReplyCommentInput!]
  deleteMany: [LikeReplyMessageScalarWhereInput!]
  upsert: [LikeReplyMessageUpsertWithWhereUniqueWithoutReplyCommentInput!]
}

input LikeReplyMessageUpdateWithoutReplyCommentDataInput {
  user: UserUpdateOneRequiredInput
}

input LikeReplyMessageUpdateWithWhereUniqueWithoutReplyCommentInput {
  where: LikeReplyMessageWhereUniqueInput!
  data: LikeReplyMessageUpdateWithoutReplyCommentDataInput!
}

input LikeReplyMessageUpsertWithWhereUniqueWithoutReplyCommentInput {
  where: LikeReplyMessageWhereUniqueInput!
  update: LikeReplyMessageUpdateWithoutReplyCommentDataInput!
  create: LikeReplyMessageCreateWithoutReplyCommentInput!
}

input LikeReplyMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [LikeReplyMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikeReplyMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikeReplyMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  replyComment: CommentReplyMessageWhereInput
  user: UserWhereInput
}

input LikeReplyMessageWhereUniqueInput {
  id: ID
}

input LikeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LikeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
}

input LikeUpdateInput {
  post: PostUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredInput
}

input LikeUpdateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  delete: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPostInput!]
  deleteMany: [LikeScalarWhereInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPostInput!]
}

input LikeUpdateWithoutPostDataInput {
  user: UserUpdateOneRequiredInput
}

input LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutPostDataInput!
}

input LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutPostDataInput!
  create: LikeCreateWithoutPostInput!
}

input LikeWhereInput {
  """Logical AND on all given filters."""
  AND: [LikeWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  post: PostWhereInput
  user: UserWhereInput
}

input LikeWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createComment(data: CommentCreateInput!): Comment!
  createCommentReplyMessage(data: CommentReplyMessageCreateInput!): CommentReplyMessage!
  createLike(data: LikeCreateInput!): Like!
  createLikeMessage(data: LikeMessageCreateInput!): LikeMessage!
  createLikeReplyMessage(data: LikeReplyMessageCreateInput!): LikeReplyMessage!
  createDisqus(data: DisqusCreateInput!): Disqus!
  createDisqusComment(data: DisqusCommentCreateInput!): DisqusComment!
  createDReplyComment(data: DReplyCommentCreateInput!): DReplyComment!
  createDisqusMessageLike(data: DisqusMessageLikeCreateInput!): DisqusMessageLike!
  createDisqusReplyMessageLike(data: DisqusReplyMessageLikeCreateInput!): DisqusReplyMessageLike!
  createCategory(data: CategoryCreateInput!): Category!
  createSubCategories(data: SubCategoriesCreateInput!): SubCategories!
  createUser(data: UserCreateInput!): User!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateCommentReplyMessage(data: CommentReplyMessageUpdateInput!, where: CommentReplyMessageWhereUniqueInput!): CommentReplyMessage
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  updateLikeMessage(data: LikeMessageUpdateInput!, where: LikeMessageWhereUniqueInput!): LikeMessage
  updateLikeReplyMessage(data: LikeReplyMessageUpdateInput!, where: LikeReplyMessageWhereUniqueInput!): LikeReplyMessage
  updateDisqus(data: DisqusUpdateInput!, where: DisqusWhereUniqueInput!): Disqus
  updateDisqusComment(data: DisqusCommentUpdateInput!, where: DisqusCommentWhereUniqueInput!): DisqusComment
  updateDReplyComment(data: DReplyCommentUpdateInput!, where: DReplyCommentWhereUniqueInput!): DReplyComment
  updateDisqusMessageLike(data: DisqusMessageLikeUpdateInput!, where: DisqusMessageLikeWhereUniqueInput!): DisqusMessageLike
  updateDisqusReplyMessageLike(data: DisqusReplyMessageLikeUpdateInput!, where: DisqusReplyMessageLikeWhereUniqueInput!): DisqusReplyMessageLike
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateSubCategories(data: SubCategoriesUpdateInput!, where: SubCategoriesWhereUniqueInput!): SubCategories
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePost(where: PostWhereUniqueInput!): Post
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteCommentReplyMessage(where: CommentReplyMessageWhereUniqueInput!): CommentReplyMessage
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteLikeMessage(where: LikeMessageWhereUniqueInput!): LikeMessage
  deleteLikeReplyMessage(where: LikeReplyMessageWhereUniqueInput!): LikeReplyMessage
  deleteDisqus(where: DisqusWhereUniqueInput!): Disqus
  deleteDisqusComment(where: DisqusCommentWhereUniqueInput!): DisqusComment
  deleteDReplyComment(where: DReplyCommentWhereUniqueInput!): DReplyComment
  deleteDisqusMessageLike(where: DisqusMessageLikeWhereUniqueInput!): DisqusMessageLike
  deleteDisqusReplyMessageLike(where: DisqusReplyMessageLikeWhereUniqueInput!): DisqusReplyMessageLike
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteSubCategories(where: SubCategoriesWhereUniqueInput!): SubCategories
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertCommentReplyMessage(where: CommentReplyMessageWhereUniqueInput!, create: CommentReplyMessageCreateInput!, update: CommentReplyMessageUpdateInput!): CommentReplyMessage!
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  upsertLikeMessage(where: LikeMessageWhereUniqueInput!, create: LikeMessageCreateInput!, update: LikeMessageUpdateInput!): LikeMessage!
  upsertLikeReplyMessage(where: LikeReplyMessageWhereUniqueInput!, create: LikeReplyMessageCreateInput!, update: LikeReplyMessageUpdateInput!): LikeReplyMessage!
  upsertDisqus(where: DisqusWhereUniqueInput!, create: DisqusCreateInput!, update: DisqusUpdateInput!): Disqus!
  upsertDisqusComment(where: DisqusCommentWhereUniqueInput!, create: DisqusCommentCreateInput!, update: DisqusCommentUpdateInput!): DisqusComment!
  upsertDReplyComment(where: DReplyCommentWhereUniqueInput!, create: DReplyCommentCreateInput!, update: DReplyCommentUpdateInput!): DReplyComment!
  upsertDisqusMessageLike(where: DisqusMessageLikeWhereUniqueInput!, create: DisqusMessageLikeCreateInput!, update: DisqusMessageLikeUpdateInput!): DisqusMessageLike!
  upsertDisqusReplyMessageLike(where: DisqusReplyMessageLikeWhereUniqueInput!, create: DisqusReplyMessageLikeCreateInput!, update: DisqusReplyMessageLikeUpdateInput!): DisqusReplyMessageLike!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertSubCategories(where: SubCategoriesWhereUniqueInput!, create: SubCategoriesCreateInput!, update: SubCategoriesUpdateInput!): SubCategories!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyCommentReplyMessages(data: CommentReplyMessageUpdateManyMutationInput!, where: CommentReplyMessageWhereInput): BatchPayload!
  updateManyDisquses(data: DisqusUpdateManyMutationInput!, where: DisqusWhereInput): BatchPayload!
  updateManyDisqusComments(data: DisqusCommentUpdateManyMutationInput!, where: DisqusCommentWhereInput): BatchPayload!
  updateManyDReplyComments(data: DReplyCommentUpdateManyMutationInput!, where: DReplyCommentWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManySubCategorieses(data: SubCategoriesUpdateManyMutationInput!, where: SubCategoriesWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyCommentReplyMessages(where: CommentReplyMessageWhereInput): BatchPayload!
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  deleteManyLikeMessages(where: LikeMessageWhereInput): BatchPayload!
  deleteManyLikeReplyMessages(where: LikeReplyMessageWhereInput): BatchPayload!
  deleteManyDisquses(where: DisqusWhereInput): BatchPayload!
  deleteManyDisqusComments(where: DisqusCommentWhereInput): BatchPayload!
  deleteManyDReplyComments(where: DReplyCommentWhereInput): BatchPayload!
  deleteManyDisqusMessageLikes(where: DisqusMessageLikeWhereInput): BatchPayload!
  deleteManyDisqusReplyMessageLikes(where: DisqusReplyMessageLikeWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManySubCategorieses(where: SubCategoriesWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  url: String!
  title: String!
  imageUrl: String
  body: String!
  description: String!
  creator: User!
  type: String!
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  category: Category!
  status: String!
  isActive: Boolean!
  isAccess: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  url: String!
  title: String!
  imageUrl: String
  body: String!
  description: String!
  type: String!
  status: String!
  isActive: Boolean!
  isAccess: Boolean!
  creator: UserCreateOneWithoutPostsInput!
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: CategoryCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutCategoryInput {
  create: [PostCreateWithoutCategoryInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutCreatorInput {
  create: [PostCreateWithoutCreatorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCategoryInput {
  id: ID
  url: String!
  title: String!
  imageUrl: String
  body: String!
  description: String!
  type: String!
  status: String!
  isActive: Boolean!
  isAccess: Boolean!
  creator: UserCreateOneWithoutPostsInput!
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  url: String!
  title: String!
  imageUrl: String
  body: String!
  description: String!
  type: String!
  status: String!
  isActive: Boolean!
  isAccess: Boolean!
  creator: UserCreateOneWithoutPostsInput!
  likes: LikeCreateManyWithoutPostInput
  category: CategoryCreateOneWithoutPostsInput!
}

input PostCreateWithoutCreatorInput {
  id: ID
  url: String!
  title: String!
  imageUrl: String
  body: String!
  description: String!
  type: String!
  status: String!
  isActive: Boolean!
  isAccess: Boolean!
  likes: LikeCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  category: CategoryCreateOneWithoutPostsInput!
}

input PostCreateWithoutLikesInput {
  id: ID
  url: String!
  title: String!
  imageUrl: String
  body: String!
  description: String!
  type: String!
  status: String!
  isActive: Boolean!
  isAccess: Boolean!
  creator: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  category: CategoryCreateOneWithoutPostsInput!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  imageUrl_ASC
  imageUrl_DESC
  body_ASC
  body_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  isActive_ASC
  isActive_DESC
  isAccess_ASC
  isAccess_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  url: String!
  title: String!
  imageUrl: String
  body: String!
  description: String!
  type: String!
  status: String!
  isActive: Boolean!
  isAccess: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  imageUrl: String

  """All values that are not equal to given value."""
  imageUrl_not: String

  """All values that are contained in given list."""
  imageUrl_in: [String!]

  """All values that are not contained in given list."""
  imageUrl_not_in: [String!]

  """All values less than the given value."""
  imageUrl_lt: String

  """All values less than or equal the given value."""
  imageUrl_lte: String

  """All values greater than the given value."""
  imageUrl_gt: String

  """All values greater than or equal the given value."""
  imageUrl_gte: String

  """All values containing the given string."""
  imageUrl_contains: String

  """All values not containing the given string."""
  imageUrl_not_contains: String

  """All values starting with the given string."""
  imageUrl_starts_with: String

  """All values not starting with the given string."""
  imageUrl_not_starts_with: String

  """All values ending with the given string."""
  imageUrl_ends_with: String

  """All values not ending with the given string."""
  imageUrl_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isAccess: Boolean

  """All values that are not equal to given value."""
  isAccess_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  url: String
  title: String
  imageUrl: String
  body: String
  description: String
  type: String
  status: String
  isActive: Boolean
  isAccess: Boolean
  creator: UserUpdateOneRequiredWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: CategoryUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  url: String
  title: String
  imageUrl: String
  body: String
  description: String
  type: String
  status: String
  isActive: Boolean
  isAccess: Boolean
}

input PostUpdateManyMutationInput {
  url: String
  title: String
  imageUrl: String
  body: String
  description: String
  type: String
  status: String
  isActive: Boolean
  isAccess: Boolean
}

input PostUpdateManyWithoutCategoryInput {
  create: [PostCreateWithoutCategoryInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCategoryInput!]
}

input PostUpdateManyWithoutCreatorInput {
  create: [PostCreateWithoutCreatorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCreatorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateOneRequiredWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutLikesDataInput
  upsert: PostUpsertWithoutLikesInput
}

input PostUpdateWithoutCategoryDataInput {
  url: String
  title: String
  imageUrl: String
  body: String
  description: String
  type: String
  status: String
  isActive: Boolean
  isAccess: Boolean
  creator: UserUpdateOneRequiredWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsDataInput {
  url: String
  title: String
  imageUrl: String
  body: String
  description: String
  type: String
  status: String
  isActive: Boolean
  isAccess: Boolean
  creator: UserUpdateOneRequiredWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  category: CategoryUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutCreatorDataInput {
  url: String
  title: String
  imageUrl: String
  body: String
  description: String
  type: String
  status: String
  isActive: Boolean
  isAccess: Boolean
  likes: LikeUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  category: CategoryUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithoutLikesDataInput {
  url: String
  title: String
  imageUrl: String
  body: String
  description: String
  type: String
  status: String
  isActive: Boolean
  isAccess: Boolean
  creator: UserUpdateOneRequiredWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  category: CategoryUpdateOneRequiredWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutCategoryInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCategoryDataInput!
}

input PostUpdateWithWhereUniqueWithoutCreatorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCreatorDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput!
  create: PostCreateWithoutLikesInput!
}

input PostUpsertWithWhereUniqueWithoutCategoryInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCategoryDataInput!
  create: PostCreateWithoutCategoryInput!
}

input PostUpsertWithWhereUniqueWithoutCreatorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCreatorDataInput!
  create: PostCreateWithoutCreatorInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  imageUrl: String

  """All values that are not equal to given value."""
  imageUrl_not: String

  """All values that are contained in given list."""
  imageUrl_in: [String!]

  """All values that are not contained in given list."""
  imageUrl_not_in: [String!]

  """All values less than the given value."""
  imageUrl_lt: String

  """All values less than or equal the given value."""
  imageUrl_lte: String

  """All values greater than the given value."""
  imageUrl_gt: String

  """All values greater than or equal the given value."""
  imageUrl_gte: String

  """All values containing the given string."""
  imageUrl_contains: String

  """All values not containing the given string."""
  imageUrl_not_contains: String

  """All values starting with the given string."""
  imageUrl_starts_with: String

  """All values not starting with the given string."""
  imageUrl_not_starts_with: String

  """All values ending with the given string."""
  imageUrl_ends_with: String

  """All values not ending with the given string."""
  imageUrl_not_ends_with: String
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isAccess: Boolean

  """All values that are not equal to given value."""
  isAccess_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  creator: UserWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  category: CategoryWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentReplyMessages(where: CommentReplyMessageWhereInput, orderBy: CommentReplyMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommentReplyMessage]!
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likeMessages(where: LikeMessageWhereInput, orderBy: LikeMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikeMessage]!
  likeReplyMessages(where: LikeReplyMessageWhereInput, orderBy: LikeReplyMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LikeReplyMessage]!
  disquses(where: DisqusWhereInput, orderBy: DisqusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Disqus]!
  disqusComments(where: DisqusCommentWhereInput, orderBy: DisqusCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DisqusComment]!
  dReplyComments(where: DReplyCommentWhereInput, orderBy: DReplyCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DReplyComment]!
  disqusMessageLikes(where: DisqusMessageLikeWhereInput, orderBy: DisqusMessageLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DisqusMessageLike]!
  disqusReplyMessageLikes(where: DisqusReplyMessageLikeWhereInput, orderBy: DisqusReplyMessageLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DisqusReplyMessageLike]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  subCategorieses(where: SubCategoriesWhereInput, orderBy: SubCategoriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubCategories]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  post(where: PostWhereUniqueInput!): Post
  comment(where: CommentWhereUniqueInput!): Comment
  commentReplyMessage(where: CommentReplyMessageWhereUniqueInput!): CommentReplyMessage
  like(where: LikeWhereUniqueInput!): Like
  likeMessage(where: LikeMessageWhereUniqueInput!): LikeMessage
  likeReplyMessage(where: LikeReplyMessageWhereUniqueInput!): LikeReplyMessage
  disqus(where: DisqusWhereUniqueInput!): Disqus
  disqusComment(where: DisqusCommentWhereUniqueInput!): DisqusComment
  dReplyComment(where: DReplyCommentWhereUniqueInput!): DReplyComment
  disqusMessageLike(where: DisqusMessageLikeWhereUniqueInput!): DisqusMessageLike
  disqusReplyMessageLike(where: DisqusReplyMessageLikeWhereUniqueInput!): DisqusReplyMessageLike
  category(where: CategoryWhereUniqueInput!): Category
  subCategories(where: SubCategoriesWhereUniqueInput!): SubCategories
  user(where: UserWhereUniqueInput!): User
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  commentReplyMessagesConnection(where: CommentReplyMessageWhereInput, orderBy: CommentReplyMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentReplyMessageConnection!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  likeMessagesConnection(where: LikeMessageWhereInput, orderBy: LikeMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeMessageConnection!
  likeReplyMessagesConnection(where: LikeReplyMessageWhereInput, orderBy: LikeReplyMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeReplyMessageConnection!
  disqusesConnection(where: DisqusWhereInput, orderBy: DisqusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DisqusConnection!
  disqusCommentsConnection(where: DisqusCommentWhereInput, orderBy: DisqusCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DisqusCommentConnection!
  dReplyCommentsConnection(where: DReplyCommentWhereInput, orderBy: DReplyCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DReplyCommentConnection!
  disqusMessageLikesConnection(where: DisqusMessageLikeWhereInput, orderBy: DisqusMessageLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DisqusMessageLikeConnection!
  disqusReplyMessageLikesConnection(where: DisqusReplyMessageLikeWhereInput, orderBy: DisqusReplyMessageLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DisqusReplyMessageLikeConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  subCategoriesesConnection(where: SubCategoriesWhereInput, orderBy: SubCategoriesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubCategoriesConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type SubCategories implements Node {
  id: ID!
  title: String!
  description: String
  category: Category!
}

"""A connection to a list of items."""
type SubCategoriesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubCategoriesEdge]!
  aggregate: AggregateSubCategories!
}

input SubCategoriesCreateInput {
  id: ID
  title: String!
  description: String
  category: CategoryCreateOneWithoutSubCategoriesInput!
}

input SubCategoriesCreateManyWithoutCategoryInput {
  create: [SubCategoriesCreateWithoutCategoryInput!]
  connect: [SubCategoriesWhereUniqueInput!]
}

input SubCategoriesCreateWithoutCategoryInput {
  id: ID
  title: String!
  description: String
}

"""An edge in a connection."""
type SubCategoriesEdge {
  """The item at the end of the edge."""
  node: SubCategories!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubCategoriesOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type SubCategoriesPreviousValues {
  id: ID!
  title: String!
  description: String
}

input SubCategoriesScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubCategoriesScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubCategoriesScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubCategoriesScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type SubCategoriesSubscriptionPayload {
  mutation: MutationType!
  node: SubCategories
  updatedFields: [String!]
  previousValues: SubCategoriesPreviousValues
}

input SubCategoriesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubCategoriesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubCategoriesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubCategoriesSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubCategoriesWhereInput
}

input SubCategoriesUpdateInput {
  title: String
  description: String
  category: CategoryUpdateOneRequiredWithoutSubCategoriesInput
}

input SubCategoriesUpdateManyDataInput {
  title: String
  description: String
}

input SubCategoriesUpdateManyMutationInput {
  title: String
  description: String
}

input SubCategoriesUpdateManyWithoutCategoryInput {
  create: [SubCategoriesCreateWithoutCategoryInput!]
  connect: [SubCategoriesWhereUniqueInput!]
  set: [SubCategoriesWhereUniqueInput!]
  disconnect: [SubCategoriesWhereUniqueInput!]
  delete: [SubCategoriesWhereUniqueInput!]
  update: [SubCategoriesUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [SubCategoriesUpdateManyWithWhereNestedInput!]
  deleteMany: [SubCategoriesScalarWhereInput!]
  upsert: [SubCategoriesUpsertWithWhereUniqueWithoutCategoryInput!]
}

input SubCategoriesUpdateManyWithWhereNestedInput {
  where: SubCategoriesScalarWhereInput!
  data: SubCategoriesUpdateManyDataInput!
}

input SubCategoriesUpdateWithoutCategoryDataInput {
  title: String
  description: String
}

input SubCategoriesUpdateWithWhereUniqueWithoutCategoryInput {
  where: SubCategoriesWhereUniqueInput!
  data: SubCategoriesUpdateWithoutCategoryDataInput!
}

input SubCategoriesUpsertWithWhereUniqueWithoutCategoryInput {
  where: SubCategoriesWhereUniqueInput!
  update: SubCategoriesUpdateWithoutCategoryDataInput!
  create: SubCategoriesCreateWithoutCategoryInput!
}

input SubCategoriesWhereInput {
  """Logical AND on all given filters."""
  AND: [SubCategoriesWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubCategoriesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubCategoriesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  category: CategoryWhereInput
}

input SubCategoriesWhereUniqueInput {
  id: ID
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  commentReplyMessage(where: CommentReplyMessageSubscriptionWhereInput): CommentReplyMessageSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  likeMessage(where: LikeMessageSubscriptionWhereInput): LikeMessageSubscriptionPayload
  likeReplyMessage(where: LikeReplyMessageSubscriptionWhereInput): LikeReplyMessageSubscriptionPayload
  disqus(where: DisqusSubscriptionWhereInput): DisqusSubscriptionPayload
  disqusComment(where: DisqusCommentSubscriptionWhereInput): DisqusCommentSubscriptionPayload
  dReplyComment(where: DReplyCommentSubscriptionWhereInput): DReplyCommentSubscriptionPayload
  disqusMessageLike(where: DisqusMessageLikeSubscriptionWhereInput): DisqusMessageLikeSubscriptionPayload
  disqusReplyMessageLike(where: DisqusReplyMessageLikeSubscriptionWhereInput): DisqusReplyMessageLikeSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  subCategories(where: SubCategoriesSubscriptionWhereInput): SubCategoriesSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  name: String!
  surname: String!
  email: String!
  password: String!
  userRole: Int!
  follows(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  discusComments(where: DisqusCommentWhereInput, orderBy: DisqusCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DisqusComment!]
  discussions(where: DisqusWhereInput, orderBy: DisqusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Disqus!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  status: String!
  isActive: Boolean!
  profileImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  name: String!
  surname: String!
  email: String!
  password: String!
  userRole: Int!
  status: String!
  isActive: Boolean!
  profileImage: String
  follows: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowsInput
  comments: CommentCreateManyWithoutUserInput
  discusComments: DisqusCommentCreateManyWithoutUserInput
  discussions: DisqusCreateManyWithoutCreatorInput
  posts: PostCreateManyWithoutCreatorInput
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowsInput {
  create: [UserCreateWithoutFollowsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDiscusCommentsInput {
  create: UserCreateWithoutDiscusCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDiscussionsInput {
  create: UserCreateWithoutDiscussionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  username: String!
  name: String!
  surname: String!
  email: String!
  password: String!
  userRole: Int!
  status: String!
  isActive: Boolean!
  profileImage: String
  follows: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowsInput
  discusComments: DisqusCommentCreateManyWithoutUserInput
  discussions: DisqusCreateManyWithoutCreatorInput
  posts: PostCreateManyWithoutCreatorInput
}

input UserCreateWithoutDiscusCommentsInput {
  id: ID
  username: String!
  name: String!
  surname: String!
  email: String!
  password: String!
  userRole: Int!
  status: String!
  isActive: Boolean!
  profileImage: String
  follows: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowsInput
  comments: CommentCreateManyWithoutUserInput
  discussions: DisqusCreateManyWithoutCreatorInput
  posts: PostCreateManyWithoutCreatorInput
}

input UserCreateWithoutDiscussionsInput {
  id: ID
  username: String!
  name: String!
  surname: String!
  email: String!
  password: String!
  userRole: Int!
  status: String!
  isActive: Boolean!
  profileImage: String
  follows: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowsInput
  comments: CommentCreateManyWithoutUserInput
  discusComments: DisqusCommentCreateManyWithoutUserInput
  posts: PostCreateManyWithoutCreatorInput
}

input UserCreateWithoutFollowersInput {
  id: ID
  username: String!
  name: String!
  surname: String!
  email: String!
  password: String!
  userRole: Int!
  status: String!
  isActive: Boolean!
  profileImage: String
  follows: UserCreateManyWithoutFollowersInput
  comments: CommentCreateManyWithoutUserInput
  discusComments: DisqusCommentCreateManyWithoutUserInput
  discussions: DisqusCreateManyWithoutCreatorInput
  posts: PostCreateManyWithoutCreatorInput
}

input UserCreateWithoutFollowsInput {
  id: ID
  username: String!
  name: String!
  surname: String!
  email: String!
  password: String!
  userRole: Int!
  status: String!
  isActive: Boolean!
  profileImage: String
  followers: UserCreateManyWithoutFollowsInput
  comments: CommentCreateManyWithoutUserInput
  discusComments: DisqusCommentCreateManyWithoutUserInput
  discussions: DisqusCreateManyWithoutCreatorInput
  posts: PostCreateManyWithoutCreatorInput
}

input UserCreateWithoutPostsInput {
  id: ID
  username: String!
  name: String!
  surname: String!
  email: String!
  password: String!
  userRole: Int!
  status: String!
  isActive: Boolean!
  profileImage: String
  follows: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowsInput
  comments: CommentCreateManyWithoutUserInput
  discusComments: DisqusCommentCreateManyWithoutUserInput
  discussions: DisqusCreateManyWithoutCreatorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  surname_ASC
  surname_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  userRole_ASC
  userRole_DESC
  status_ASC
  status_DESC
  isActive_ASC
  isActive_DESC
  profileImage_ASC
  profileImage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  name: String!
  surname: String!
  email: String!
  password: String!
  userRole: Int!
  status: String!
  isActive: Boolean!
  profileImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  surname: String

  """All values that are not equal to given value."""
  surname_not: String

  """All values that are contained in given list."""
  surname_in: [String!]

  """All values that are not contained in given list."""
  surname_not_in: [String!]

  """All values less than the given value."""
  surname_lt: String

  """All values less than or equal the given value."""
  surname_lte: String

  """All values greater than the given value."""
  surname_gt: String

  """All values greater than or equal the given value."""
  surname_gte: String

  """All values containing the given string."""
  surname_contains: String

  """All values not containing the given string."""
  surname_not_contains: String

  """All values starting with the given string."""
  surname_starts_with: String

  """All values not starting with the given string."""
  surname_not_starts_with: String

  """All values ending with the given string."""
  surname_ends_with: String

  """All values not ending with the given string."""
  surname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  userRole: Int

  """All values that are not equal to given value."""
  userRole_not: Int

  """All values that are contained in given list."""
  userRole_in: [Int!]

  """All values that are not contained in given list."""
  userRole_not_in: [Int!]

  """All values less than the given value."""
  userRole_lt: Int

  """All values less than or equal the given value."""
  userRole_lte: Int

  """All values greater than the given value."""
  userRole_gt: Int

  """All values greater than or equal the given value."""
  userRole_gte: Int
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  profileImage: String

  """All values that are not equal to given value."""
  profileImage_not: String

  """All values that are contained in given list."""
  profileImage_in: [String!]

  """All values that are not contained in given list."""
  profileImage_not_in: [String!]

  """All values less than the given value."""
  profileImage_lt: String

  """All values less than or equal the given value."""
  profileImage_lte: String

  """All values greater than the given value."""
  profileImage_gt: String

  """All values greater than or equal the given value."""
  profileImage_gte: String

  """All values containing the given string."""
  profileImage_contains: String

  """All values not containing the given string."""
  profileImage_not_contains: String

  """All values starting with the given string."""
  profileImage_starts_with: String

  """All values not starting with the given string."""
  profileImage_not_starts_with: String

  """All values ending with the given string."""
  profileImage_ends_with: String

  """All values not ending with the given string."""
  profileImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
  follows: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowsInput
  comments: CommentUpdateManyWithoutUserInput
  discusComments: DisqusCommentUpdateManyWithoutUserInput
  discussions: DisqusUpdateManyWithoutCreatorInput
  posts: PostUpdateManyWithoutCreatorInput
}

input UserUpdateInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
  follows: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowsInput
  comments: CommentUpdateManyWithoutUserInput
  discusComments: DisqusCommentUpdateManyWithoutUserInput
  discussions: DisqusUpdateManyWithoutCreatorInput
  posts: PostUpdateManyWithoutCreatorInput
}

input UserUpdateManyDataInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
}

input UserUpdateManyMutationInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowsInput {
  create: [UserCreateWithoutFollowsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutDiscusCommentsInput {
  create: UserCreateWithoutDiscusCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutDiscusCommentsDataInput
  upsert: UserUpsertWithoutDiscusCommentsInput
}

input UserUpdateOneRequiredWithoutDiscussionsInput {
  create: UserCreateWithoutDiscussionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutDiscussionsDataInput
  upsert: UserUpsertWithoutDiscussionsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentsDataInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
  follows: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowsInput
  discusComments: DisqusCommentUpdateManyWithoutUserInput
  discussions: DisqusUpdateManyWithoutCreatorInput
  posts: PostUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutDiscusCommentsDataInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
  follows: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowsInput
  comments: CommentUpdateManyWithoutUserInput
  discussions: DisqusUpdateManyWithoutCreatorInput
  posts: PostUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutDiscussionsDataInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
  follows: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowsInput
  comments: CommentUpdateManyWithoutUserInput
  discusComments: DisqusCommentUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutFollowersDataInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
  follows: UserUpdateManyWithoutFollowersInput
  comments: CommentUpdateManyWithoutUserInput
  discusComments: DisqusCommentUpdateManyWithoutUserInput
  discussions: DisqusUpdateManyWithoutCreatorInput
  posts: PostUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutFollowsDataInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
  followers: UserUpdateManyWithoutFollowsInput
  comments: CommentUpdateManyWithoutUserInput
  discusComments: DisqusCommentUpdateManyWithoutUserInput
  discussions: DisqusUpdateManyWithoutCreatorInput
  posts: PostUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutPostsDataInput {
  username: String
  name: String
  surname: String
  email: String
  password: String
  userRole: Int
  status: String
  isActive: Boolean
  profileImage: String
  follows: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowsInput
  comments: CommentUpdateManyWithoutUserInput
  discusComments: DisqusCommentUpdateManyWithoutUserInput
  discussions: DisqusUpdateManyWithoutCreatorInput
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutDiscusCommentsInput {
  update: UserUpdateWithoutDiscusCommentsDataInput!
  create: UserCreateWithoutDiscusCommentsInput!
}

input UserUpsertWithoutDiscussionsInput {
  update: UserUpdateWithoutDiscussionsDataInput!
  create: UserCreateWithoutDiscussionsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowsDataInput!
  create: UserCreateWithoutFollowsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  surname: String

  """All values that are not equal to given value."""
  surname_not: String

  """All values that are contained in given list."""
  surname_in: [String!]

  """All values that are not contained in given list."""
  surname_not_in: [String!]

  """All values less than the given value."""
  surname_lt: String

  """All values less than or equal the given value."""
  surname_lte: String

  """All values greater than the given value."""
  surname_gt: String

  """All values greater than or equal the given value."""
  surname_gte: String

  """All values containing the given string."""
  surname_contains: String

  """All values not containing the given string."""
  surname_not_contains: String

  """All values starting with the given string."""
  surname_starts_with: String

  """All values not starting with the given string."""
  surname_not_starts_with: String

  """All values ending with the given string."""
  surname_ends_with: String

  """All values not ending with the given string."""
  surname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  userRole: Int

  """All values that are not equal to given value."""
  userRole_not: Int

  """All values that are contained in given list."""
  userRole_in: [Int!]

  """All values that are not contained in given list."""
  userRole_not_in: [Int!]

  """All values less than the given value."""
  userRole_lt: Int

  """All values less than or equal the given value."""
  userRole_lte: Int

  """All values greater than the given value."""
  userRole_gt: Int

  """All values greater than or equal the given value."""
  userRole_gte: Int
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  profileImage: String

  """All values that are not equal to given value."""
  profileImage_not: String

  """All values that are contained in given list."""
  profileImage_in: [String!]

  """All values that are not contained in given list."""
  profileImage_not_in: [String!]

  """All values less than the given value."""
  profileImage_lt: String

  """All values less than or equal the given value."""
  profileImage_lte: String

  """All values greater than the given value."""
  profileImage_gt: String

  """All values greater than or equal the given value."""
  profileImage_gte: String

  """All values containing the given string."""
  profileImage_contains: String

  """All values not containing the given string."""
  profileImage_not_contains: String

  """All values starting with the given string."""
  profileImage_starts_with: String

  """All values not starting with the given string."""
  profileImage_not_starts_with: String

  """All values ending with the given string."""
  profileImage_ends_with: String

  """All values not ending with the given string."""
  profileImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  follows_every: UserWhereInput
  follows_some: UserWhereInput
  follows_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  discusComments_every: DisqusCommentWhereInput
  discusComments_some: DisqusCommentWhereInput
  discusComments_none: DisqusCommentWhereInput
  discussions_every: DisqusWhereInput
  discussions_some: DisqusWhereInput
  discussions_none: DisqusWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
