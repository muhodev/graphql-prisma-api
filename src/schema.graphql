# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
    me: User!
    post(id: ID!): Post!
    categories:[Category!]!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser(id:ID): User!
    updateUser(id: ID,data: UpdateUserInput!): User!

    createPost(data: CreatePostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!

    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!

    createCommentReplyMessage(data: CreateCommentReplyMessageInput!): CommentReplyMessage!
    deleteCommentReplyMessage(id: ID!): CommentReplyMessage!
    updateCommentReplyMessage(id: ID!, data: UpdateCommentReplyMessageInput!): CommentReplyMessage!

    createCategory(data: CreateCategoryInput!): Category!
    updateCategory(data: updateCategoryInput!): Category!
    deleteCategory(id: ID): Category!

    createSubCategory(data: CreateSubCategoryInput!): SubCategory!
    deleteSubCategory(id: ID): SubCategory!
    updateSubCategory(data: updateSubCategoryInput!): SubCategory!

}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
}


type User {
    id: ID!
    username: String!
    name: String!
    surname: String!
    email: String
    password: String
    userRole: Int!
    follows: [User!]!
    followers: [User!]!
    comments: [Comment!]!
    discusComments: [DisqusComment!]!
    discussions: [Disqus!]!
    posts: [Post!]!
    status: String!
    isActive: Boolean!
    profileImage: String
    createdAt: String!
    updatedAt: String!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    surname: String!
    username: String!
    email: String!
    password: String!
    profileImage: String
}

input LoginUserInput {
    username: String!
    password: String!
}

input UpdateUserInput {
    name: String
    surname: String
    username: String
    email: String
    password: String
    profileImage: String
    isActive: Boolean
    status: String 
    userRole: Int
}


type Post {
    id: ID!
    url: String!
    title: String!
    imageUrl: String
    description: String
    creator: User!
    status: String!
    type: String!
    likes: [Like!]!
    comments: [Comment!]!
    isActive: Boolean!
    updatedAt: String!
    createdAt: String!
}


input CreatePostInput {
    url: String!
    title: String!
    imageUrl: String
    body: String!
    description: String!
    type: String!
    category: String!
    isActive: Boolean
}


input UpdatePostInput {
    url: String
    title: String
    imageUrl: String
    body: String
    description: String
    category: String
    status: String
    isAccess: Boolean
}



type Like {
    id: ID!
    post: Post!
    user: User!
}


type Comment {
    id: ID!
    text: String!
    user: User!
    post: Post!
    status: String!
    likes: [LikeMessage!]!
    replies: [CommentReplyMessage!]
    updatedAt: String!
    createdAt: String!
}

input CreateCommentInput {
    text: String!
    post: ID!
}

input UpdateCommentInput {
    text: String
    status: String
}


type CommentReplyMessage {
    id: ID!
    text: String!
    comment: Comment!
    user: User!
    likes: [LikeReplyMessage!]!
    status: String!
    createdAt: String!
    updatedAt: String!
}

input CreateCommentReplyMessageInput {
    text: String!
    comment: String!
}

input UpdateCommentReplyMessageInput {
    text: String
    comment: String
    status: String
}

type LikeMessage {
    id: ID!
    comment: Comment!
    user: User!
}

type LikeReplyMessage {
    id:ID!
    replyComment: CommentReplyMessage!
    user: User!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}


type Category {
    id: ID!
    url: String!
    title: String!
    description: String!
    posts: [Post!]!
    SubCategories: [SubCategories!]!
}

input CreateCategoryInput {
    url: String!
    title: String!
    description: String!
}

type SubCategory {
    id: ID!
    title: String!
    description: String
    category: Category!
}

input CreateSubCategoryInput {
    id: ID!
    title: String!
    description: String!
    category: String!
}

input updateCategoryInput {
    url: String
    title: String
    description: String
}
input updateSubCategoryInput {
    url: String
    title: String
    description: String
    category: String
}